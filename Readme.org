#+title: Readme

* Notice
This is one of my ~release framework based on nix~ which contains following:
- [[https://github.com/hughjfchen/deploy-env][deploy-env]]
- [[https://github.com/hughjfchen/deploy-config][deploy-config(that is this repo)]]
- [[https://github.com/hughjfchen/deploy-packer][deploy-packer]]

* What is this
This is a NixOS module which evalues to application component config for the deployment target
based on the specified directory structure.

* What is this for
This module is the most important building block for the deployment solution based on
nix. It will provide the config of the each application components for the deployment target machine.
It needs the [[https://github.com/hughjfchen/deploy-env][deploy-env]] as the input and evalue the result as an input to the [[https://github.com/hughjfchen/deploy-packer][deploy-packer]].

* Options
This module defines config for some common components of an application.

** db
The ~db~ module is based on ~postgresql~ and has the following options:

| option             | type | default                  | descriptio                                |
|--------------------+------+--------------------------+-------------------------------------------|
| host               | str  | null                     | hostName                                  |
| port               | int  | 5432                     | DNS Name                                  |
| database           | str  | null                     | the database nmae                         |
| dataSchema         | str  | null                     | the schema name for data                  |
| dataSchemaUser     | bool | true                     | the user name to access the data schema   |
| dataSchemaPassword | str  | /var/${processUser}/run  | the password to access to the data schema |
| apiSchema          | str  | /var/${processUser}/data | the schema name for api                   |
| apiSchemaUser      |      |                          | the user name to access the api schema    |
| apiSchemaPassword  |      |                          | the password access to the api schema     |
| anonRole           |      |                          | the ananymous role name                   |
| jwtSecret          |      |                          | the secret for JWT token                  |
| jwtLifeTime        |      |                          | the life timeout for the JWT token        |
|--------------------+------+--------------------------+-------------------------------------------|

These options are declared in the ~db.nix~ file under the top level directory.

** db-gateway
The ~db-gateway~ is based on ~postgrest~ and has the following options:

| option       | type | default                 | descriptio                                     |
|--------------+------+-------------------------+------------------------------------------------|
| db-uri       | str  | null                    | the URI to access the postgresql database      |
| db-schem     | str  | null                    | the schema name                                |
| db-anon-role | str  | null                    | the anonymous role name                        |
| jwt-secret   | str  | null                    | the secret to generate the JWT token           |
| server-host  | bool | true                    | the db-gateway service host name or IP address |
| server-port  | str  | /var/${processUser}/run | the db-gateway service port                    |
|--------------+------+-------------------------+------------------------------------------------|

These options are declared in the ~db-gateway.nix~ file under the top level directory.

** api-gateway
The ~api-gateway~ is based on ~nginx~ and has the following options:

| option         | type | default                  | descriptio                                      |
|----------------+------+--------------------------+-------------------------------------------------|
| docRoot        | str  | null                     | the docRoot                                     |
| uploadHome     | str  | null                     | the home directory for upload                   |
| logDir         | str  | null                     | the directory for log                           |
| cacheDir       | str  | null                     | the directory for cache                         |
| serverName     | bool | true                     | the servername                                  |
| listenPort     | str  | /var/${processUser}/run  | the port number                                 |
| uploadMaxSize  | str  | /var/${processUser}/data | the max size to allow for upload                |
| resolver       |      |                          | the resolver                                    |
| postgrest-host |      |                          | the dnsName or IP address for postgrest service |
| postgrest-port |      |                          | the port number for the postgrest service       |
|----------------+------+--------------------------+-------------------------------------------------|

These options are declared in the ~api-gateway.nix~ file under the top level directory.

** messaging
The ~messaging~ module is based on ~rabbitmq~ and has the following options:

| option   | type | default                 | descriptio                                 |
|----------+------+-------------------------+--------------------------------------------|
| host     | str  | null                    | hostName                                   |
| port     | str  | null                    | port number                                |
| user     | str  | null                    | user name to access the messaging engine   |
| password | str  | null                    | password to access to the messaging engine |
| topic    | bool | true                    | the default topic name                     |
| queue    | str  | /var/${processUser}/run | the default queue name                     |
|----------+------+-------------------------+--------------------------------------------|

These options are declared in the ~messaging.nix~ file under the top level directory.

* Directory Structure
A directory structure is used to describe the deployment target. It composes with tow parts,
the first part is the ~site~, the second part is the ~phase~, which could be explained
in more detail as following:
- site :: This specify the place where the application will be deployed to
- phase :: This specify the target environment, it could be ~test~, ~stage~ or ~production~

* Add a new deployment target
With the above directory structure in mind, do the following if you want to add a new
deployment target:
1. make a directory under the ~site~ which specifiy the target place
2. make a directory ~phase~ under the directory created in step 1
3. make a directory ~test~, ~stage~ and ~production~ under the directory created in step 2
4. under each directory created in step 3, add a nix module definition file for each component
   of the application, for some common component, e.g. DB, API-Gateway or Messaging etc.
   you can copy a sample nix file from ~site/local/phase/test~ directory as reference.

* How to use it
Usually, this module will be used as a dependency of another module [[https://github.com/hughjfchen/deploy-packer][deploy-packer]], so you will import
this module into your ~release.nix~ file, and pass it to the ~deploy-packer~ derivation. Refer to following
code:
#+begin_src nix
myEnv = import ./site/yourSite/phase/yourPhase/env.nix;
myConfig = import ./site/yourSite/phase/yourPhase/config.nix {env = myEnv;};
myPacker = import ./deploy-packer/default.nix {config = myConfig;};
#+end_src


* Todos
Following enhancement may be implemented in the future release for this module:
- more setting samples for common component of application
