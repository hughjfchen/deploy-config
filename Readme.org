#+title: Readme

* Notice
This is one of my ~release framework based on nix~ which contains following:
- [[https://github.com/hughjfchen/deploy-env][deploy-env]]
- [[https://github.com/hughjfchen/deploy-config][deploy-config(that is this repo)]]
- [[https://github.com/hughjfchen/deploy-packer][deploy-packer]]

* What is this
This is a NixOS module which evalues to application component config for the deployment target
based on the specified directory structure.

* What is this for
This module is the most important building block for the deployment solution based on
nix. It will provide the config of the each application components for the deployment target machine.
It needs the [[https://github.com/hughjfchen/deploy-env][deploy-env]] as the input and evalue the result as an input to the [[https://github.com/hughjfchen/deploy-packer][deploy-packer]].

* Options
This module defines config for some common components of an application.

** db
The ~db~ module has the following options:

| option           | type | default                  | descriptio                                                                             |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|
| hostName         | str  | null                     | hostName                                                                               |
| dnsName          | str  | null                     | DNS Name                                                                               |
| ipAddress        | str  | null                     | the IP address of the deployment target machine                                        |
| processUser      | str  | null                     | user name the process under which the process will run                                 |
| isSystemdService | bool | true                     | if the application will run as a systemd service                                       |
| runDir           | str  | /var/${processUser}/run  | the directory under which the intermedia files generated during runtime will be placed |
| dataDir          | str  | /var/${processUser}/data | the directory under which the data files will be placed                                |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|

These options are declared in the ~db.nix~ file under the top level directory.

** db-gateway
The ~db-gateway~ module has the following options:

| option           | type | default                  | descriptio                                                                             |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|
| hostName         | str  | null                     | hostName                                                                               |
| dnsName          | str  | null                     | DNS Name                                                                               |
| ipAddress        | str  | null                     | the IP address of the deployment target machine                                        |
| processUser      | str  | null                     | user name the process under which the process will run                                 |
| isSystemdService | bool | true                     | if the application will run as a systemd service                                       |
| runDir           | str  | /var/${processUser}/run  | the directory under which the intermedia files generated during runtime will be placed |
| dataDir          | str  | /var/${processUser}/data | the directory under which the data files will be placed                                |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|

These options are declared in the ~db-gateway.nix~ file under the top level directory.

** api-gateway
The ~api-gateway~ module has the following options:

| option           | type | default                  | descriptio                                                                             |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|
| hostName         | str  | null                     | hostName                                                                               |
| dnsName          | str  | null                     | DNS Name                                                                               |
| ipAddress        | str  | null                     | the IP address of the deployment target machine                                        |
| processUser      | str  | null                     | user name the process under which the process will run                                 |
| isSystemdService | bool | true                     | if the application will run as a systemd service                                       |
| runDir           | str  | /var/${processUser}/run  | the directory under which the intermedia files generated during runtime will be placed |
| dataDir          | str  | /var/${processUser}/data | the directory under which the data files will be placed                                |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|

These options are declared in the ~api-gateway.nix~ file under the top level directory.

** messaging
The ~messaging~ module has the following options:

| option           | type | default                  | descriptio                                                                             |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|
| hostName         | str  | null                     | hostName                                                                               |
| dnsName          | str  | null                     | DNS Name                                                                               |
| ipAddress        | str  | null                     | the IP address of the deployment target machine                                        |
| processUser      | str  | null                     | user name the process under which the process will run                                 |
| isSystemdService | bool | true                     | if the application will run as a systemd service                                       |
| runDir           | str  | /var/${processUser}/run  | the directory under which the intermedia files generated during runtime will be placed |
| dataDir          | str  | /var/${processUser}/data | the directory under which the data files will be placed                                |
|------------------+------+--------------------------+----------------------------------------------------------------------------------------|

These options are declared in the ~messaging.nix~ file under the top level directory.

* Directory Structure
A directory structure is used to describe the deployment target. It composes with tow parts,
the first part is the ~site~, the second part is the ~phase~, which could be explained
in more detail as following:
- site :: This specify the place where the application will be deployed to
- phase :: This specify the target environment, it could be ~test~, ~stage~ or ~production~

* Add a new deployment target
With the above directory structure in mind, do the following if you want to add a new
deployment target:
1. make a directory under the ~site~ which specifiy the target place
2. make a directory ~phase~ under the directory created in step 1
3. make a directory ~test~, ~stage~ and ~production~ under the directory created in step 2
4. under each directory created in step 3, add a nix module definition file for each component
   of the application, for some common component, e.g. DB, API-Gateway or Messaging etc.
   you can copy a sample nix file from ~site/local/phase/test~ directory as reference.

* How to use it
Usually, this module will be used as a dependency of another module [[https://github.com/hughjfchen/deploy-packer][deploy-packer]], so you will import
this module into your ~release.nix~ file, and pass it to the ~deploy-packer~ derivation. Refer to following
code:
#+begin_src nix
myEnv = import ./site/yourSite/phase/yourPhase/env.nix;
myConfig = import ./site/yourSite/phase/yourPhase/config.nix {env = myEnv;};
myPacker = import ./deploy-packer/default.nix {config = myConfig;};
#+end_src


* Todos
Following enhancement may be implemented in the future release for this module:
- more options for deployment target
- more setting samples for common component of application
